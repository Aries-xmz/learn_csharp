值类型变量可以直接分配给一个值，它们是从类 System.ValueType 中派生的。
值类型直接包含数据。比如 int、char、float，它们分别存储数字、字符、浮点数。
当您声明一个int类型时，系统分配内存来存储值。

C#中可用的值类型：
1.bool 布尔 true或false 默认false
2.byte 8位无符号整数 0到255 默认0
3.char 16位Unicode字符 U +0000 到 U +ffff 默认'\0'
4.decimal 128位精确的十进制数，28-29有效位数 
5.double 64位双精度浮点整型
6.float 32位单精度浮点整
7.int 32位有符号整数类型 -2147483648 到 2147483647
8.long 64位有符号整数类型 -9223372036854775808 到 9223372036854775807
9.sbyte 8位有符号整数类型 -128 到127
10.short 16位有符号整数类型 -32768 到 32767
11.uint 32位无符号整数类型 0 到 429496795
12.ulong 64位无符号整数类型 0 到 18446744073709551615
13.ushort 16位无符号整数类型 0 到 65535

如果需要得到一个类型或一个变量在特定平台上的准确尺寸，可以使用sizeof方法。表达式 sizeof(type) 产生以字节
为单位存储对象或类型的存储尺寸。

引用类型（Reference types）
引用类型不包含存储在变量中的实际数据，但它们包含对变量的引用。
换句话说，它们指的是一个内存位置。使用多个变量时，引用类型可以指向一个内存位置。如果内存位置的数据是由一个
变量改变的，其他变量会自动反映这种值的变化。内置的 引用类型有：object、dynamic和string。

对象（Object）类型
对象（Object）类型 是C#通用类型系统（Common Type System - CTS）中所有数据类型的终极基类。Object是
System.Object类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或是用户
自定义类型）的值。但是，在分配之前，需要先进行类型转换。
当一个值类型转换成对象类型时，被称为“装箱”；反之，当一个对象类型转换为值类型时，被称为“拆箱”。

动态（Dynamic）类型
您可以存储任何类型的值在动态数据类型变量中。这些变量的类型检查是在运行时发生的。
声明动态类型的语法： 
dynamic <variable_name> = value;
dynamic a = 20;
动态类型与对象类型相似，但是对象类型变量的类型检查是在编译时发生的，而动态类型变量的类型检查是运行时发生的。

字符串（String）类型
字符串（String）类型 允许您给变量分配任何字符串值。字符串（String）类型是System.String类的别名。它是从对
象（Object）类型派生的。字符串类型（String）的值可以通过两种形式进行分配：引号和@引导。
String str = "my name is xumingzhao";
@"google.com";
C# string字符串的前面可以加@（称作 逐字字符串）将转义字符（\）当作普通字符对待
String str = @"c:\windows";等价于String str = "c:\\windows";
@字符串中可以任意换行，换行符及缩进空格都计算在字符串长度之内
String str = @"<script type=""text/javascript"">
        <!--
        -->
</script>";
用户自定义引用类型有： class、interface或delegate。

指针类型（Pointer types）
指针类型变量存储另一种类型的内存地址。C#中的指针与C或C++中的指针有相同的功能。
声明指针类型的语法： type* identifier;
char* cptr; int* iptr;

C# 类型转换
类型转换从根本上说是类型铸造，或是说是把数据从一种类型转换为另一种类型。
在C#中，类型铸造分为两种形式：
隐式类型转换：这些转换是C#默认的以安全的方式进行的转换，不会导致数据丢失。
例如：从小的整数类型转换为大的整数类型，从派生类转换为基类。
显式类型转换：显式类型转换，即强制类型转换。显式类型转换需要强制换算运算符，而且强制转换会造成数据丢失。

C#类型转换方法（C#提供了内置的类型转换方法）
1.ToBoolean 如果可能的话，把类型转换为布尔型。
2.ToByte 把类型转换为字节类型。
3.ToChar 如果可能的话，把类型转换为单个Unicode字符类型。
4.ToDateTime 把类型（整数或是字符串类型）转换为 日期-时间 结构。
5.ToDecimal 把浮点型或是整数类型转换为十进制类型。
6.ToDouble 把类型转换为双精度浮点型。
7.ToInt16 把类型转换为16位整数类型。
8.ToInt32 把类型转换为32位整数类型。
9.ToInt64 把类型转换为64位整数类型。
10.ToSbyte 把类型转换为有符号字节类型。
11.ToSingle 把类型转换为小浮点数类型。
12.ToString 把类型转换为字符串类型。
13.ToType 把类型转换为指定类型。
14.ToUInt16 把类型转换为16位无符号整数类型。
15.ToUInt32 把类型转换为32位无符号整数类型。
16.ToUInt64 把类型转换为64位无符号整数类型。

C#变量
一个变量只不过是一个供程序操作的存储区的名字。在C#中，每个变量都有一个特定的类型，类型决定了变量的内存大小
和布局。范围内的值可以存储在内存中，可以对变量进行一些列操作。
C#中提供的基本的值类型大致可以分为以下几类：
整数类型：sbyte、byte、short、ushort、int、uint、long、ulong和char
浮点型：float和double
十进制类型：decimal
布尔类型：true或false，指定的值
空类型：可以为空的数据类型
C#中变量定义的语法：
<data_type> <variable_list>;
在这里，data_type必须是一个有效的C#数据类型，variable_list可以由一个或多个用逗号分隔的标识符名称组成。

C#常量
常量是固定值，程序执行期间不会改变。常量可以是任何基本数据类型，比如整数常量、浮点常量、字符常量或者字符
串常量，还有枚举常量。常量可以被当做常规的变量，只是它们的值在定义后不能被修改。
整数常量可以是十进制、八进制或是十六进制的常量。前缀指定基数：0x或是0X表示十六进制，0表示八进制，没有
前缀表示十进制。整数常量也可以有后缀，可以是U和L的组合，其中，U和L分别表示unsigned和long。后缀可以是
大写或者是小写，多个后缀以任意顺序进行组合。

212 合法 十进制
215U 合法 无符号整数
0XFeeL 合法 十六进制long
078 非法 八进制
032UU 非法 重复后缀
85 合法 十进制
0213 合法 八进制
0x4b 合法 十六进制
30 int
30u 无符号int
30l long
30ul 无符号long

浮点常量
一个浮点常量是由整数部分、小数点、小数部分和指数部分组成。您可以使用小数形式或者指数形式来表示浮点常量。
这里有一些浮点常量的实例：
3.14159 合法
314159E-5L 合法
510E 非法 不完全指数
210f 非法 没有小数或指数
.e55 缺少整数或是小数
使用小数形式表示时，必须包含小数点、指数或是同时包含两者。使用指数形式表示时，必须包含整数部分、小数部分
或同时包含两者。有符号的指数是用e或E表示的。

字符常量
字符常量是括在单引号里，例如，'x'，且可以存储在一个简单的字符类型变量中。一个字符常量可以是一个普通字符（
例如'x'）、一个转义序列（例如'\t'）或者一个通用字符（例如'\u02c0'）。
\\ \字符
\' '字符
\" "字符
\? ?字符
\a Alert或bell
\b 退格键（Backspace）
\f 换页符（Form feed）
\n 换行符（Newline）
\r 回车
\t 水平制表符（tab）
\v 垂直制表符（tab）
\ooo 一到三位的八进制数
\xhh 一个或者多个数字的十六进制数

字符串常量
字符串常量是括在双引号""里，或是括在@""里。字符串常量包含的字符与字符常量相似，可以是：普通字符、转义序列字符和
通用字符。使用字符串常量时，可以把一个很长的行拆成多个行，可以使用空格分隔各个部分。这里是一些字符串常量的实例。
string a = "hello, world";
string b = @"hello, world";
string c = "hello \t world";
string d = @"hello \t world";
string e = "Joe said \"Hello\" to me";
string f = @"Joe said ""Hello"" to me";
string g = "\\\\server\\share\\file.txt";
string h = @"\\server\\share\\file.txt";
string i = "one\r\ntwo\r\nthree";
string j = @"one
two
three";

C#封装
封装 被定义为"把一个或多个项目封闭在一个物理的或者逻辑的包中"。在面向对象程序设计方法论中，封装是为了防止对现实
细节的访问。抽象和封装是面向对象程序设计的相关特性。抽象允许相关信息可视化，封装则使用开发者实现所需级别的抽象。
C#封装根据具体的需要，设置使用者的访问权限，并通过访问修饰符来实现。
一个访问修饰符定义了一个类成员的范围和可见性。C#支持的访问修饰符如下所示：
pubic：所有对象都可以访问；
private：对象本身在对象内部可以访问；
protected：只有该类对象及其子类对象可以访问；
internal：同一个程序集的对象可以访问；
protected：访问限于当前程序集或派生自包含类的类型。

public 访问修饰符
public 访问修饰符允许一个类将其成员和成员函数暴露给其他的函数和对象。任何公有成员可以被外部的类访问。